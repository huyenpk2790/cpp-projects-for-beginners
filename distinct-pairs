/* This cpp program is based on HackerRank's sample full-stack developer hiring test.

Program description: Given a vector of integers and a target value, write the function countPairs to find the number of distinct pairs 
that sum to the target. The pairs (x, y) and (x', y') where x ≤ y  and x' ≤ y' are considered distinct if (x, y) ≤ (x', y'). 
As an illustration, sort the two arrays sorted(3, 2) = (2, 3) and sorted(2, 3) = (2, 3).  The two arrays are not distinct. 
The two arrays (2, 3) and (2, 4) are distinct.

countPairs accepts a vector of integers and a target sum as parameters and returns an integer representing the number of
distinct pairs in the vector that sum to the target value. */

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int countPairs(vector<int> arr, double k) {
	vector<double> pos,neg;
  /*calculate the difference between integers in the vector and k/2. Sort them into 2 vectors: positive differences & negative ones.
  Remove duplicate differences in each vector, then pair 2 elements from each vector (also increase the number of distinct pairs) 
  if their sum is 0 (so that the original integers add to k).*/
	for (unsigned int i=0;i<arr.size();i++){
		double diff=arr[i]-double(k/2);
		if (diff>0) pos.push_back(diff);
		else if (diff<0) neg.push_back(diff);
		else {pos.push_back(diff); neg.push_back(diff);}
	}
	sort(pos.begin(),pos.end()); //sort vector in increasing order
	sort(neg.begin(),neg.end());
	pos.erase(unique(pos.begin(), pos.end()), pos.end()); //erase duplicate elements in vector (distinct pairs)
	neg.erase(unique(neg.begin(), neg.end()), neg.end());
	int num=0;
	for (auto x:pos) {
		for (auto y:neg){
			if (x+y==0){num++;}
		}
	}
	return num;
}

int main() {
	cout<<countPairs({1, 3, 46, 1, 3, 9},47)<<endl; //sample test case
	return 0; //expected output: 1
}
